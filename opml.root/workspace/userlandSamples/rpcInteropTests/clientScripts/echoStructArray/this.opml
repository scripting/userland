<?xml version="1.0" encoding="ISO-8859-1"?>
<!-- OPML generated by OPML Editor v10.1b19 on Sat, 03 Jun 2017 03:39:14 GMT -->
<opml version="2.0">
	<head>
		<title>workspace.userlandSamples.rpcInteropTests.clientScripts.echoStructArray</title>
		<dateCreated>Sun, 15 Apr 2001 05:15:55 GMT</dateCreated>
		<dateModified>Sat, 03 Jun 2017 03:39:14 GMT</dateModified>
		<ownerName>Dave Winer</ownerName>
		<ownerId>http://davewiner.com/</ownerId>
		<expansionState>1, 3, 8, 12</expansionState>
		<vertScrollState>1</vertScrollState>
		<windowTop>50</windowTop>
		<windowLeft>50</windowLeft>
		<windowBottom>470</windowBottom>
		<windowRight>550</windowRight>
		</head>
	<body>
		<outline text="on echoStructArray (server, port, protocol)">
			<outline text="local (aStructArray = {})"/>
			<outline text="bundle //generate the array">
				<outline text="local (i)"/>
				<outline text="for i = 1 to 3">
					<outline text="local (numerator = random (-5000, 5000))"/>
					<outline text="local (denominator = random (1, 1000))"/>
					<outline text="local (aFloat = double (numerator) / denominator)"/>
					<outline text=""/>
					<outline text="local (anInteger = random (-5000, 5000))"/>
					<outline text=""/>
					<outline text="local (n = random (1, 50))"/>
					<outline text="local (aString = states.nthState (n))"/>
					<outline text=""/>
					<outline text="local (aStruct); new (tableType, @aStruct)"/>
					<outline text="aStruct.varFloat = aFloat"/>
					<outline text="aStruct.varInt = anInteger"/>
					<outline text="aStruct.varString = aString"/>
					<outline text=""/>
					<outline text="aStructArray[0] = aStruct"/>
					</outline>
				</outline>
			<outline text=""/>
			<outline text="local (result, params = {&quot;inputStructArray&quot;:aStructArray})"/>
			<outline text="case protocol">
				<outline text="&quot;xml-rpc&quot;">
					<outline text="result = xml.rpc (server, port, &quot;interopEchoTests.echoStructArray&quot;, @params, protocol:protocol, soapAction:&quot;/interopEchoTests&quot;)"/>
					</outline>
				<outline text="&quot;soap&quot;">
					<outline text="result = soap.rpc.client (&quot;/interopEchoTests&quot;, &quot;echoStructArray&quot;, @params, server, port, customStructType:&quot;SOAPStruct&quot;, customNamespace:&quot;urn&quot;, customNamespaceURI:&quot;url&quot;, flDebug:true)"/>
					</outline>
				</outline>
			<outline text=""/>
			<outline text="bundle //test return value">
				<outline text="if typeOf (result) != listType and typeOf (result) != tableType">
					<outline text="scriptError (&quot;The call failed because the response was not an array.&quot;)"/>
					</outline>
				<outline text="local (i, ct = sizeOf (result))"/>
				<outline text="if ct != sizeOf (aStructArray)">
					<outline text="scriptError (&quot;The call failed because the size of the request array is different from the size of the response array.&quot;)"/>
					</outline>
				<outline text="for i = 1 to ct">
					<outline text="local (aRequestStruct = aStructArray[i])"/>
					<outline text="local (aResultStruct = result[i])"/>
					<outline text="if typeOf (aResultStruct) != tableType">
						<outline text="scriptError (&quot;The call failed because the response was not a struct.&quot;)"/>
						</outline>
					<outline text="if not workspace.userlandSamples.rpcInteropTests.floatNearlyEqual (aResultStruct.varFloat, aRequestStruct.varFloat)">
						<outline text="scriptError (&quot;The call failed because the response struct's float was different from the request. We sent &quot; + aRequestStruct.varFloat + &quot; and the server returned &quot; + aResultStruct.varFloat + &quot;.&quot;)"/>
						</outline>
					<outline text="if aResultStruct.varInt != aRequestStruct.varInt">
						<outline text="scriptError (&quot;The call failed because the response struct's integer was different from the request. We sent &quot; + aRequestStruct.varInt + &quot; and the server returned &quot; + aResultStruct.varInt + &quot;.&quot;)"/>
						</outline>
					<outline text="if aResultStruct.varString != aRequestStruct.varString">
						<outline text="scriptError (&quot;The call failed because the response struct's string was different from the request. We sent &quot; + aRequestStruct.varString + &quot; and the server returned &quot; + aResultStruct.varString + &quot;.&quot;)"/>
						</outline>
					</outline>
				</outline>
			<outline text=""/>
			<outline text="return (true) //success"/>
			</outline>
		</body>
	</opml>
